#!/usr/bin/env python

# Takes an IATI XML file on stdin; outputs CSV of data relevant to the budget

import sys
import lxml.etree
import unicodecsv

def tuple_of_elt(elt):
    def by_name(name): return elt.find(name).text

    title           = by_name("title")
    reporting_org   = by_name("reporting-org")
    iati_identifier = by_name("iati-identifier")

    if elt.find("sector") is not None:
        sector          = by_name("sector")
        sector_code     = elt.find("sector").attrib['code']
    else:
        sector          = None
        sector_code     = None

    def get_dates():
        activity_dates = elt.findall('activity-date')
        for ad in activity_dates:
            ty = ad.attrib['type']
            try:
                iso_date = ad.attrib['iso-date']
                yield (ty, iso_date)
            except KeyError:
                #print "missing iso-date in ", ad.attrib, iati_identifier
                #raise
                yield (ty, None)
    activity_dates = dict(get_dates())

    start_actual    = activity_dates.get("start-actual", None)
    start_planned   = activity_dates.get("start-planned", None)
    end_actual      = activity_dates.get("end-actual", None)
    end_planned     = activity_dates.get("end-planned", None)

    if elt.find("recipient-country") is not None:
        recipient_cntry = by_name('recipient-country')
        rec_code        = elt.find('recipient-country').attrib['code']
    else:
        recipient_cntry = None
        rec_code        = None

    location        = elt.find('location')
    if location is not None and location.xpath('//pos'):        
        pos             = location.xpath('//pos')[0].text
    else:
        pos             = None

    budgets = elt.findall('budget')

    for budget in budgets:
        value = budget.find('value')
        value_date = value.attrib['value-date']
        value_amount = value.text

        yield (
            title,
            reporting_org,
            iati_identifier,
            sector_code,
            sector,
            start_actual,
            end_actual,
            recipient_cntry,
            rec_code,
            pos,
            value_date,
            value_amount
        )

titles = ["Title", "Reporting Org", "IATI Identifier",
          "Sector Code", "Sector", "Start actual", "End actual",
          "Recipient Country", "Recipient Country Code", "Position",
          "Value Date", "Value Amount"]

def run():
    root = lxml.etree.parse(sys.stdin)

    w = unicodecsv.writer(sys.stdout)

    w.writerow(titles)

    for elt in root.xpath('//iati-activity'):
        for row in tuple_of_elt(elt):
            w.writerow(row)
        
if __name__ == '__main__':
    run()
